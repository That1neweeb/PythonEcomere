import sqlite3
import customtkinter as ctk
from tkinter import messagebox

# Initialize the database
def initialize_db():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    # Create tables if they don't exist
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS books (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            author TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT NOT NULL,
            email TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

# Add a book to the database
def add_book(title, author):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO books (title, author) VALUES (?, ?)', (title, author))
    conn.commit()
    conn.close()

# Delete a book from the database
def delete_book(book_id):
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM books WHERE id = ?', (book_id,))
    conn.commit()
    conn.close()

# Fetch all books from the database
def fetch_books():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM books')
    books = cursor.fetchall()
    conn.close()
    return books

# Fetch all users from the database
def fetch_users():
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users')
    users = cursor.fetchall()
    conn.close()
    return users

# CustomTkinter App
class AdminPanel(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Admin Panel")
        self.geometry("800x600")

        # Initialize database
        initialize_db()

        # Tabs for Books and Users
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(padx=20, pady=20, fill="both", expand=True)
        self.tabview.add("Books")
        self.tabview.add("Users")

        # Books Tab
        self.books_frame = ctk.CTkFrame(self.tabview.tab("Books"))
        self.books_frame.pack(padx=10, pady=10, fill="both", expand=True)

        # Add Book Form
        ctk.CTkLabel(self.books_frame, text="Add Book", font=("Arial", 16)).pack(pady=10)
        self.title_entry = ctk.CTkEntry(self.books_frame, placeholder_text="Title")
        self.title_entry.pack(pady=5)
        self.author_entry = ctk.CTkEntry(self.books_frame, placeholder_text="Author")
        self.author_entry.pack(pady=5)
        ctk.CTkButton(self.books_frame, text="Add Book", command=self.add_book).pack(pady=10)

        # Book List
        self.book_listbox = ctk.CTkTextbox(self.books_frame, height=200)
        self.book_listbox.pack(pady=10, fill="both", expand=True)
        self.refresh_books()

        # Delete Book Button
        ctk.CTkButton(self.books_frame, text="Delete Selected Book", command=self.delete_book).pack(pady=10)

        # Users Tab
        self.users_frame = ctk.CTkFrame(self.tabview.tab("Users"))
        self.users_frame.pack(padx=10, pady=10, fill="both", expand=True)

        # User List
        ctk.CTkLabel(self.users_frame, text="User Records", font=("Arial", 16)).pack(pady=10)
        self.user_listbox = ctk.CTkTextbox(self.users_frame, height=300)
        self.user_listbox.pack(pady=10, fill="both", expand=True)
        self.refresh_users()

    def add_book(self):
        title = self.title_entry.get()
        author = self.author_entry.get()
        if title and author:
            add_book(title, author)
            self.title_entry.delete(0, "end")
            self.author_entry.delete(0, "end")
            self.refresh_books()
            messagebox.showinfo("Success", "Book added successfully!")
        else:
            messagebox.showerror("Error", "Please fill in both fields.")

    def delete_book(self):
        selected_book = self.book_listbox.get("sel.first", "sel.last")
        if selected_book:
            book_id = selected_book.split(":")[0].strip()
            delete_book(book_id)
            self.refresh_books()
            messagebox.showinfo("Success", "Book deleted successfully!")
        else:
            messagebox.showerror("Error", "Please select a book to delete.")

    def refresh_books(self):
        self.book_listbox.delete("1.0", "end")
        books = fetch_books()
        for book in books:
            self.book_listbox.insert("end", f"{book[0]}: {book[1]} by {book[2]}\n")

    def refresh_users(self):
        self.user_listbox.delete("1.0", "end")
        users = fetch_users()
        for user in users:
            self.user_listbox.insert("end", f"{user[0]}: {user[1]} ({user[2]})\n")

# Run the app
if __name__ == "__main__":
    app = AdminPanel()
    app.mainloop()